generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model order_products {
  id         String   @id @db.Uuid
  order_id   String   @db.Uuid
  user_id    String   @db.Uuid
  product_id String   @db.Uuid
  quantity   Int
  unit_price Float
  orders     orders   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products   products @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([order_id, product_id], map: "order_id_product_id")
}

model orders {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  order_date     DateTime         @db.Date
  order_products order_products[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model products {
  id             String           @id @db.Uuid
  name           String           @db.VarChar(255)
  description    String           @db.VarChar(255)
  img_url        String           @db.VarChar(255)
  size           String           @db.VarChar(255)
  includes       String           @db.VarChar(255)
  category       String           @db.VarChar(255)
  price          Float
  stock          Int
  order_products order_products[]
  user_products  user_products[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model user_products {
  id         String   @id @db.Uuid
  user_id    String   @db.Uuid
  product_id String   @db.Uuid
  quantity   Int
  products   products @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, product_id], map: "unique_user_id_product_id")
}

model users {
  id              String           @id @db.Uuid
  username        String           @unique @db.VarChar(255)
  password        String           @db.VarChar(255)
  is_admin        Boolean?         @default(false)
  name            String           @db.VarChar(255)
  email_address   String?          @db.VarChar(255)
  mailing_address String           @db.VarChar(255)
  phone_number    String?          @db.VarChar(255)
  billing_address String?          @db.VarChar(255)
  order_products  order_products[]
  orders          orders[]
  user_products   user_products[]
}
